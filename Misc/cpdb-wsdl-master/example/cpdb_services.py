################################################## 
# cpdb_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from cpdb_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI

# Locator
class cpdbLocator:
    cpdb_portType_address = "http://cpdb.molgen.mpg.de/ws2/"
    def getcpdb_portTypeAddress(self):
        return cpdbLocator.cpdb_portType_address
    def getcpdb_portType(self, url=None, **kw):
        return cpdb_http_bindingSOAP(url or cpdbLocator.cpdb_portType_address, **kw)

# Methods
class cpdb_http_bindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: getCpdbVersion
    def getCpdbVersion(self, request):
        if isinstance(request, getCpdbVersionRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="cpdbns#getCpdbVersion", **kw)
        # no output wsaction
        response = self.binding.Receive(getCpdbVersionResponse.typecode)
        return response

    # op: getAvailableAccessionTypes
    def getAvailableAccessionTypes(self, request):
        if isinstance(request, getAvailableAccessionTypesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="cpdbns#getAvailableAccessionTypes", **kw)
        # no output wsaction
        response = self.binding.Receive(getAvailableAccessionTypesResponse.typecode)
        return response

    # op: mapAccessionNumbers
    def mapAccessionNumbers(self, request):
        if isinstance(request, mapAccessionNumbersRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="cpdbns#mapAccessionNumbers", **kw)
        # no output wsaction
        response = self.binding.Receive(mapAccessionNumbersResponse.typecode)
        return response

    # op: getAvailableFsetTypes
    def getAvailableFsetTypes(self, request):
        if isinstance(request, getAvailableFsetTypesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="cpdbns#getAvailableFsetTypes", **kw)
        # no output wsaction
        response = self.binding.Receive(getAvailableFsetTypesResponse.typecode)
        return response

    # op: getDefaultBackgroundSize
    def getDefaultBackgroundSize(self, request):
        if isinstance(request, getDefaultBackgroundSizeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="cpdbns#getDefaultBackgroundSize", **kw)
        # no output wsaction
        response = self.binding.Receive(getDefaultBackgroundSizeResponse.typecode)
        return response

    # op: overRepresentationAnalysis
    def overRepresentationAnalysis(self, request):
        if isinstance(request, overRepresentationAnalysisRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="cpdbns#overRepresentationAnalysis", **kw)
        # no output wsaction
        response = self.binding.Receive(overRepresentationAnalysisResponse.typecode)
        return response

    # op: enrichmentAnalysis
    def enrichmentAnalysis(self, request):
        if isinstance(request, enrichmentAnalysisRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="cpdbns#enrichmentAnalysis", **kw)
        # no output wsaction
        response = self.binding.Receive(enrichmentAnalysisResponse.typecode)
        return response

    # op: getCpdbIdsInFset
    def getCpdbIdsInFset(self, request):
        if isinstance(request, getCpdbIdsInFsetRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="cpdbns#getCpdbIdsInFset", **kw)
        # no output wsaction
        response = self.binding.Receive(getCpdbIdsInFsetResponse.typecode)
        return response

getCpdbVersionRequest = ns0.getCpdbVersion_Dec().pyclass

getCpdbVersionResponse = ns0.getCpdbVersionResponse_Dec().pyclass

getAvailableAccessionTypesRequest = ns0.getAvailableAccessionTypes_Dec().pyclass

getAvailableAccessionTypesResponse = ns0.getAvailableAccessionTypesResponse_Dec().pyclass

mapAccessionNumbersRequest = ns0.mapAccessionNumbers_Dec().pyclass

mapAccessionNumbersResponse = ns0.mapAccessionNumbersResponse_Dec().pyclass

getAvailableFsetTypesRequest = ns0.getAvailableFsetTypes_Dec().pyclass

getAvailableFsetTypesResponse = ns0.getAvailableFsetTypesResponse_Dec().pyclass

getDefaultBackgroundSizeRequest = ns0.getDefaultBackgroundSize_Dec().pyclass

getDefaultBackgroundSizeResponse = ns0.getDefaultBackgroundSizeResponse_Dec().pyclass

overRepresentationAnalysisRequest = ns0.overRepresentationAnalysis_Dec().pyclass

overRepresentationAnalysisResponse = ns0.overRepresentationAnalysisResponse_Dec().pyclass

enrichmentAnalysisRequest = ns0.enrichmentAnalysis_Dec().pyclass

enrichmentAnalysisResponse = ns0.enrichmentAnalysisResponse_Dec().pyclass

getCpdbIdsInFsetRequest = ns0.getCpdbIdsInFset_Dec().pyclass

getCpdbIdsInFsetResponse = ns0.getCpdbIdsInFsetResponse_Dec().pyclass
