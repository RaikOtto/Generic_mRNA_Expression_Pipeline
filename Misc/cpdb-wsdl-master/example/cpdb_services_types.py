################################################## 
# cpdb_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# cpdbns
##############################

class ns0:
    targetNamespace = "cpdbns"

    class getCpdbVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCpdbVersion"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.getCpdbVersion_Dec.schema
            TClist = []
            kw["pname"] = ("cpdbns","getCpdbVersion")
            kw["aname"] = "_getCpdbVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getCpdbVersion_Holder"
            self.pyclass = Holder

    class getCpdbVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCpdbVersionResponse"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.getCpdbVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"cpdbVersion"), aname="_cpdbVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","getCpdbVersionResponse")
            kw["aname"] = "_getCpdbVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cpdbVersion = None
                    return
            Holder.__name__ = "getCpdbVersionResponse_Holder"
            self.pyclass = Holder

    class getAvailableAccessionTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAvailableAccessionTypes"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.getAvailableAccessionTypes_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"entityType"), aname="_entityType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","getAvailableAccessionTypes")
            kw["aname"] = "_getAvailableAccessionTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entityType = None
                    return
            Holder.__name__ = "getAvailableAccessionTypes_Holder"
            self.pyclass = Holder

    class getAvailableAccessionTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAvailableAccessionTypesResponse"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.getAvailableAccessionTypesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accType"), aname="_accType", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","getAvailableAccessionTypesResponse")
            kw["aname"] = "_getAvailableAccessionTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accType = []
                    return
            Holder.__name__ = "getAvailableAccessionTypesResponse_Holder"
            self.pyclass = Holder

    class mapAccessionNumbers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "mapAccessionNumbers"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.mapAccessionNumbers_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accType"), aname="_accType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"accNumbers"), aname="_accNumbers", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","mapAccessionNumbers")
            kw["aname"] = "_mapAccessionNumbers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accType = None
                    self._accNumbers = []
                    return
            Holder.__name__ = "mapAccessionNumbers_Holder"
            self.pyclass = Holder

    class mapAccessionNumbersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "mapAccessionNumbersResponse"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.mapAccessionNumbersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accNumber"), aname="_accNumber", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cpdbId"), aname="_cpdbId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","mapAccessionNumbersResponse")
            kw["aname"] = "_mapAccessionNumbersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accNumber = []
                    self._cpdbId = []
                    return
            Holder.__name__ = "mapAccessionNumbersResponse_Holder"
            self.pyclass = Holder

    class getAvailableFsetTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAvailableFsetTypes"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.getAvailableFsetTypes_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"entityType"), aname="_entityType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","getAvailableFsetTypes")
            kw["aname"] = "_getAvailableFsetTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entityType = None
                    return
            Holder.__name__ = "getAvailableFsetTypes_Holder"
            self.pyclass = Holder

    class getAvailableFsetTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAvailableFsetTypesResponse"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.getAvailableFsetTypesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"fsetType"), aname="_fsetType", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","getAvailableFsetTypesResponse")
            kw["aname"] = "_getAvailableFsetTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fsetType = []
                    self._description = []
                    return
            Holder.__name__ = "getAvailableFsetTypesResponse_Holder"
            self.pyclass = Holder

    class getDefaultBackgroundSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDefaultBackgroundSize"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.getDefaultBackgroundSize_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"fsetType"), aname="_fsetType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"accType"), aname="_accType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","getDefaultBackgroundSize")
            kw["aname"] = "_getDefaultBackgroundSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fsetType = None
                    self._accType = None
                    return
            Holder.__name__ = "getDefaultBackgroundSize_Holder"
            self.pyclass = Holder

    class getDefaultBackgroundSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDefaultBackgroundSizeResponse"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.getDefaultBackgroundSizeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"bgSize"), aname="_bgSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","getDefaultBackgroundSizeResponse")
            kw["aname"] = "_getDefaultBackgroundSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bgSize = None
                    return
            Holder.__name__ = "getDefaultBackgroundSizeResponse_Holder"
            self.pyclass = Holder

    class overRepresentationAnalysis_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "overRepresentationAnalysis"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.overRepresentationAnalysis_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"entityType"), aname="_entityType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fsetType"), aname="_fsetType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cpdbIdsFg"), aname="_cpdbIdsFg", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cpdbIdsBg"), aname="_cpdbIdsBg", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"accType"), aname="_accType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname=(ns,"pThreshold"), aname="_pThreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","overRepresentationAnalysis")
            kw["aname"] = "_overRepresentationAnalysis"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entityType = None
                    self._fsetType = None
                    self._cpdbIdsFg = []
                    self._cpdbIdsBg = []
                    self._accType = None
                    self._pThreshold = None
                    return
            Holder.__name__ = "overRepresentationAnalysis_Holder"
            self.pyclass = Holder

    class overRepresentationAnalysisResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "overRepresentationAnalysisResponse"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.overRepresentationAnalysisResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"details"), aname="_details", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"overlappingEntitiesNum"), aname="_overlappingEntitiesNum", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"allEntitiesNum"), aname="_allEntitiesNum", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pValue"), aname="_pValue", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"qValue"), aname="_qValue", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","overRepresentationAnalysisResponse")
            kw["aname"] = "_overRepresentationAnalysisResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = []
                    self._details = []
                    self._overlappingEntitiesNum = []
                    self._allEntitiesNum = []
                    self._pValue = []
                    self._qValue = []
                    return
            Holder.__name__ = "overRepresentationAnalysisResponse_Holder"
            self.pyclass = Holder

    class enrichmentAnalysis_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "enrichmentAnalysis"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.enrichmentAnalysis_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"entityType"), aname="_entityType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fsetType"), aname="_fsetType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cpdbIdsMeasurements"), aname="_cpdbIdsMeasurements", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname=(ns,"pThreshold"), aname="_pThreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","enrichmentAnalysis")
            kw["aname"] = "_enrichmentAnalysis"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entityType = None
                    self._fsetType = None
                    self._cpdbIdsMeasurements = []
                    self._pThreshold = None
                    return
            Holder.__name__ = "enrichmentAnalysis_Holder"
            self.pyclass = Holder

    class enrichmentAnalysisResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "enrichmentAnalysisResponse"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.enrichmentAnalysisResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"details"), aname="_details", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"measuredEntitiesNum"), aname="_measuredEntitiesNum", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"allEntitiesNum"), aname="_allEntitiesNum", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pValue"), aname="_pValue", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"qValue"), aname="_qValue", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","enrichmentAnalysisResponse")
            kw["aname"] = "_enrichmentAnalysisResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = []
                    self._details = []
                    self._measuredEntitiesNum = []
                    self._allEntitiesNum = []
                    self._pValue = []
                    self._qValue = []
                    return
            Holder.__name__ = "enrichmentAnalysisResponse_Holder"
            self.pyclass = Holder

    class getCpdbIdsInFset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCpdbIdsInFset"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.getCpdbIdsInFset_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"fsetId"), aname="_fsetId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fsetType"), aname="_fsetType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"entsetType"), aname="_entsetType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","getCpdbIdsInFset")
            kw["aname"] = "_getCpdbIdsInFset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fsetId = None
                    self._fsetType = None
                    self._entsetType = None
                    return
            Holder.__name__ = "getCpdbIdsInFset_Holder"
            self.pyclass = Holder

    class getCpdbIdsInFsetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCpdbIdsInFsetResponse"
        schema = "cpdbns"
        def __init__(self, **kw):
            ns = ns0.getCpdbIdsInFsetResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"cpdbIds"), aname="_cpdbIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("cpdbns","getCpdbIdsInFsetResponse")
            kw["aname"] = "_getCpdbIdsInFsetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cpdbIds = []
                    return
            Holder.__name__ = "getCpdbIdsInFsetResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: cpdbns)
