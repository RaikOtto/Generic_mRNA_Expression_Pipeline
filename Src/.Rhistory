library("biomaRt")
listMarts()
useMart(ensembl)
library("biomaRt")
listMarts()
useMart("ensembl")
ensembl = useMart("ensembl")
listDatasets("ensembl")
listDatasets(ensembl)
ensembl = useDataset("hsapiens_gene_ensembl", mart=ensembl)
filters = listFilters(ensembl)
filters[1:5,]
attributes = listAttributes(ensembl)
attributes[1:5,]
filters = listFilters(ensembl)
filters[1:15,]
attributes = listAttributes(ensembl)
attributes[1:15,]
affyids=c("202763_at","209310_s_at","207500_at")
getBM(attributes=c('affy_hg_u133_plus_2', 'entrezgene'), filters = 'affy_hg_u133_plus_2', values = affyids, mart = ensembl)
getBM(attributes=c('affy_hg_u133_plus_2', 'hgnc_symbol', 'chromosome_name','start_position','end_position', 'band'), filters = 'affy_hg_u133_plus_2', values = affyids, mart = ensembl)
getBM(attributes=c('affy_hg_u133_plus_2','ensembl_gene_id'), filters = c('chromosome_name','start','end'), values=list(16,1100000,1250000), mart=ensembl)
snpmart = useMart("snp", dataset="hsapiens_snp")
library("limma")
limmaUsersGuide()
pipeline_loc = paste( system("echo $HOME",intern = T), "Generic_mRNA_Expression_Pipeline", sep ="/" )
setwd( paste(pipeline_loc, "Src", sep="/") ) # Set the path to where the pipeline is located
source( "pipeline_structure.r" )
default_parameters = T
which_project = "ovarian"
source( paste(system("echo $HOME", intern = T), "project_files.r", sep="/"))
###
create_cohorts    = T # 2
parse_files       = T # 3
normalize         = T # 4
qc_control        = F # 5
annotate          = F # 6
absent_analysis   = F # 7
dif_exp_ana       = F # 8
export_results    = F # 9
create_pathways   = F # 10
extract_interest  = F # 11
annotate_tissue_abbundance = F # 12
## Misc
# Extra information
expression_data = "~/Dropbox/PhD/NAR_sub_june_2015/expression_all.txt"
### frma test
frma_path = "/media/rayott/Backup/Runx_AML1_Leukemea/"
# generic
stat_design = "contrast"
setwd( paste(pipeline_loc, "Src", sep="/") )
source( "pipeline_structure.r" );run_analysis();print( "Finished" )
rownames( eset )
colnames( eset )
which(colnames( eset ) %in% phenodata$ID)
colnames( eset ) %in% phenodata$ID
which( phenodata$ID %in% phenodata$ID )
which( phenodata$ID %in% colnames( eset ) )
phenodata$ID %in% colnames( eset )
eset
prset = eset[, which( colnames(eset) %in% phenodata$ID)]
prset
prDatSet = eDatSet
print("Step 6: Data annotation")
### pathway mapping
library("stringr")
kegg_t = read.table( kegg_file_path, header =T , sep ="\t" )
cpdb_t = read.table( cpdb_file_path, header =T , sep ="\t", fill = T )
cpdb_ident = str_replace(cpdb_t$external_id, "path:", "")
interesting_pathways_mapping = match( str_trim( kegg_t$HSA_ID ), str_trim( cpdb_ident ) )
interesting_pathways_table = cpdb_t[ interesting_pathways_mapping ,]
if ( chip_type == "hgu133plus2" ){
if ( multi_probe ){
### yet to be done
print("Multiprobe annotation not implemented yet, System aborting")
quit()
} else {
hgnc_genes = mget( rownames(eset), hgu133plus2SYMBOL ); hgnc_genes[ is.na(hgnc_genes)  ] = ""
ensembl_genes = mget( rownames(eset), hgu133plus2ENSEMBL ); ensembl_genes[ is.na(ensembl_genes)  ] = ""
entrez_genes = mget( rownames(eset), hgu133plus2ENTREZID ); entrez_genes[ is.na(entrez_genes)  ] = ""
uniprot = mget( rownames(eset), hgu133plus2UNIPROT ); uniprot[ is.na(uniprot)  ] = ""
#pfam   = select( rownames(eset), hgu133plus2PFAM )
go = mget( rownames(eset), hgu133plus2GO ); go[ is.na(go)  ] = ""
omim = mget( rownames(eset), hgu133plus2OMIM ); go[ is.na(omim)  ] = ""
enzyme = mget( rownames(eset), hgu133plus2ENZYME ); enzyme[ is.na(enzyme)  ] = ""
}
} else if ( chip_type == "hgu133a" ){
if ( multi_probe ){
mapWithMultiProbes_entrez = toggleProbes( hgu133aENTREZID, "all")
mapWithMultiProbes_symbols = toggleProbes( hgu133aSYMBOL, "all")
hgnc_genes = mget( rownames( eset ), mapWithMultiProbes_symbols )
entrez_genes = mget( rownames( eset ), mapWithMultiProbes_entrez )
} else {
hgnc_genes = mget( rownames(eset), hgu133aSYMBOL ); hgnc_genes[ is.na(hgnc_genes)  ] = ""
entrez_genes = mget( rownames(eset), hgu133aENTREZID ); entrez_genes[ is.na(entrez_genes)  ] = ""
}
ensembl_genes = mget( rownames(eset), hgu133aENSEMBL ); ensembl_genes[ is.na(ensembl_genes)  ] = ""
hgnc_names = mget( rownames(eset), hgu133aGENENAME ); hgnc_genes[ is.na(hgnc_names)  ] = ""
uniprot = mget( rownames(eset), hgu133aUNIPROT ); uniprot[ is.na(uniprot)  ] = ""
pathway = mget( rownames(eset), hgu133aPATH ); uniprot[ is.na(pathway)  ] = ""
#pfam   = select( rownames(eset), PFAM )
go = mget( rownames(eset), hgu133aGO ); go[ is.na(go)  ] = ""
omim = mget( rownames(eset), hgu133aOMIM ); go[ is.na(omim)  ] = ""
enzyme = mget( rownames(eset), hgu133aENZYME ); enzyme[ is.na(enzyme)  ] = ""
} else if ( chip_type %in% c( "pd.hugene.2.0.st", "pd.huex.1.0.st.v2" ) ){
featureData( eset  ) = getNetAffx( eset, type = "transcript" )
split_fun = function( entry, pos ){ res = unlist( str_split( entry, " // " ) ); if (length(res) > 1){ return( res[pos] ) } else{ return( "" ) } }
hgnc_symbols = str_trim( unlist( lapply( featureData( eset  )$geneassignment, FUN=split_fun, 2 ) ) )
#hgnc_names = str_trim( unlist( lapply( featureData( eset  )$geneassignment, FUN=split_fun, 3 ) ) )
#probe_ids = featureData( eset  )$probesetid
} else {
print("Unknown Chip Type")
stop()
}
if (integrate_drug_data){
index_drug = match( drug_type, colnames( phenodata ), nomatch = 0 )
if (index_drug == 0){
print("Could not find drug in cohorts file")
quit()
}
mapping = match( names(cohorts_vec), phenodata$ID, nomatch = 0)
drug_data = phenodata[ mapping  ,index_drug ]
names(drug_data) = names(cohorts_vec)
}
eset
print("Step 7: Absent gene analysis")
library("genefilter")
f1 = pOverA( 1/3, log2( 100 ) )
f2 = function( x ) ( diff( range( x, na.rm = T ) ) > log2( 1.5 ) )
ff = filterfun( f1, f2 )
not_absent_index = genefilter( eset, ff )
eDatSet = eset[ not_absent_index, ]  #filtered expression matrix
probes_included = rownames( eset[ not_absent_index, ] )
probes_excluded = rownames( eset[ !not_absent_index, ] )
#gene_list = unlist( str_split( as.character(keggdata$HSA_ID.Kegg_name), "\t" ) )
gene_list = unlist( str_split( as.character(keggdata$Gene_id_hgnc ), "," ) )
#gene_list = unique( c( genes_of_interest,gene_list ) )
genes_included = gene_list[ not_absent_index ]
genes_excluded = gene_list[ !not_absent_index ]
#mapping_interesting = which( genes_excluded %in% unlist(str_split( interesting_pathways_table$hgnc_symbol_ids,",") ) )
#absent_report = data.frame(
# "probe_id" = probes_excluded[ mapping_interesting ],
#  "hgnc_gene" = genes_included,
# "expression" = round( exprs(eset)[ mapping_interesting, ], 2 )
#)
if (exists("absent_report")){
colnames( absent_report ) = c("probe_id","hgnc_gene",colnames(exprs(eset)[ - not_absent_index, ]))
write.table( absent_report, absent_gene_file_path, row.names=F, sep = "\t", quote = F )
remove(absent_report)
}
eDatSet
prDatSet = eDatSet
prDatSet = eset
prDatSet
colnames(prDatSet)
prset = prset[ , which( colnames(prset) %in% phenodata$ID ) ]
prset
eset
print("Running step 8: Differential Expression")
library("limma")
if ( chip_type %in% c( "hgu133plus2", "hgu133a" ) ){
eset = eset[ ! startsWith( rownames(eset), "AFFX-" ), ]
}
eset = eset[ , which( colnames(eset) %in% phenodata$ID  ) ]
index = which( colnames(phenodata) == cohorts_type )
pData( eset )$Group = phenodata[ match( colnames( eset ), phenodata$ID, nomatch = 0 ), index  ]
eset
eDatSet = eset
eset
if (var_filter ){
exprs( eDatSet ) = exprs( varFilter( eDatSet  , var.cutoff = 0.6 ) )
}
source("cohort_creation.r")
if (stat_design == "contrast"){
fit = lmFit( eDatSet[ , c( index_ctrl, index_case )  ], design )
cont.matrix = makeContrasts(  contrast = CASE - CTRL,  levels = design)
fit = contrasts.fit( fit, cont.matrix )
fit = eBayes( fit )
volc_all = topTable( fit, coef = "contrast", number  = nrow(eDatSet), adjust  ="BH", p.value = 1, lfc = 0)
} else {
fit = lmFit( eDatSet, design )
fit = eBayes( fit )
volc_all = topTable( fit, number  = nrow(eDatSet), adjust  ="BH", p.value = 1, lfc = 0)
}
eset
plot( volc_all$logFC,   1-( volc_all$P.Value ))
topall = topTable( fit, coef = "contrast", number  = nrow( eDatSet ), adjust  ="none", p.value = p_val, lfc = lfc_exp)
View(topall)
if ( (dim(topall)[1] == 0) & (dim(topall)[2] == 0) ){
stop("Topall has dimension zero")
}
eset
topall$logFC = round(topall$logFC,2)
topall$AveExpr = round(topall$AveExpr,2)
topall$t = round( topall$t, 2 )
topall$B = round( topall$B, 2 )
topall = topall[ abs(topall$logFC) >= lfc_exp  ,]
print( c( "Amount probes higher in Case cohort:", sum( topall$logFC >= lfc_exp ) ) )
print( c( "Amount probes lower in Case cohort:" , sum( topall$logFC <= lfc_exp ) ) )
print("Step 7: Absent gene analysis")
library("genefilter")
f1 = pOverA( 1/3, log2( 100 ) )
f2 = function( x ) ( diff( range( x, na.rm = T ) ) > log2( 1.5 ) )
ff = filterfun( f1, f2 )
not_absent_index = genefilter( eset, ff )
eDatSet = eset[ not_absent_index, ]  #filtered expression matrix
probes_included = rownames( eset[ not_absent_index, ] )
probes_excluded = rownames( eset[ !not_absent_index, ] )
#gene_list = unlist( str_split( as.character(keggdata$HSA_ID.Kegg_name), "\t" ) )
gene_list = unlist( str_split( as.character(keggdata$Gene_id_hgnc ), "," ) )
#gene_list = unique( c( genes_of_interest,gene_list ) )
genes_included = gene_list[ not_absent_index ]
genes_excluded = gene_list[ !not_absent_index ]
#mapping_interesting = which( genes_excluded %in% unlist(str_split( interesting_pathways_table$hgnc_symbol_ids,",") ) )
#absent_report = data.frame(
# "probe_id" = probes_excluded[ mapping_interesting ],
#  "hgnc_gene" = genes_included,
# "expression" = round( exprs(eset)[ mapping_interesting, ], 2 )
#)
if (exists("absent_report")){
colnames( absent_report ) = c("probe_id","hgnc_gene",colnames(exprs(eset)[ - not_absent_index, ]))
write.table( absent_report, absent_gene_file_path, row.names=F, sep = "\t", quote = F )
remove(absent_report)
}
eDatSet
eset
print("Running step 8: Differential Expression")
library("limma")
if ( chip_type %in% c( "hgu133plus2", "hgu133a" ) ){
eset = eset[ ! startsWith( rownames(eset), "AFFX-" ), ]
}
#eset = eset[ , which( colnames(eset) %in% phenodata$ID  ) ]
#index = which( colnames(phenodata) == cohorts_type )
#pData( eset )$Group = phenodata[ match( colnames( eset ), phenodata$ID, nomatch = 0 ), index  ]
#eDatSet = eset
if (var_filter ){
exprs( eDatSet ) = exprs( varFilter( eDatSet  , var.cutoff = 0.6 ) )
}
source("cohort_creation.r")
if (stat_design == "contrast"){
fit = lmFit( eDatSet[ , c( index_ctrl, index_case )  ], design )
cont.matrix = makeContrasts(  contrast = CASE - CTRL,  levels = design)
fit = contrasts.fit( fit, cont.matrix )
fit = eBayes( fit )
volc_all = topTable( fit, coef = "contrast", number  = nrow(eDatSet), adjust  ="BH", p.value = 1, lfc = 0)
} else {
fit = lmFit( eDatSet, design )
fit = eBayes( fit )
volc_all = topTable( fit, number  = nrow(eDatSet), adjust  ="BH", p.value = 1, lfc = 0)
}
eDatSet
plot( volc_all$logFC,   1-( volc_all$P.Value ))
topall = topTable( fit, coef = "contrast", number  = nrow( eDatSet ), adjust  ="none", p.value = p_val, lfc = lfc_exp)
if ( (dim(topall)[1] == 0) & (dim(topall)[2] == 0) ){
stop("Topall has dimension zero")
}
topall$logFC = round(topall$logFC,2)
topall$AveExpr = round(topall$AveExpr,2)
topall$t = round( topall$t, 2 )
topall$B = round( topall$B, 2 )
topall = topall[ abs(topall$logFC) >= lfc_exp  ,]
print( c( "Amount probes higher in Case cohort:", sum( topall$logFC >= lfc_exp ) ) )
print( c( "Amount probes lower in Case cohort:" , sum( topall$logFC <= lfc_exp ) ) )
install.packages("WriteXLS")
library("WriteXLS")
print("Step 9: Exporting data")
if ( chip_type == "hgu133plus2" ){
library("hgu133plus2.db")
hgnc_genes  = as.character(mget( rownames( topall ) ,hgu133plus2SYMBOL))
hgnc_names  = as.character(mget( rownames( topall ) ,hgu133plus2GENENAME))
entrez_genes= as.character(mget( rownames( topall ) ,hgu133plus2ENTREZID))
pathway     = as.character(mget( rownames( topall  ) ,hgu133plus2PATH))
topall_res = data.frame(
"logFC"               = topall$logFC,
"P_Value"             = topall$P.Val,
"HGNC_symb"           = hgnc_genes,
"HGNC_name"           = str_replace_all(hgnc_names,",",";"),
"entrez"              = entrez_genes,
"pathway"             = pathway
)
topall_res = topall_res[ order(topall_res$logFC, decreasing = T)  ,]
} else if ( chip_type == "hgu133a" ) {
library("hgu133a.db")
hgnc_genes  = as.character(mget( rownames( topall ) ,hgu133aSYMBOL))
hgnc_names  = as.character(mget( rownames( topall ) ,hgu133aGENENAME))
entrez_genes= as.character(mget( rownames( topall ) ,hgu133aENTREZID))
pathway     = as.character(mget( rownames( topall  ) ,hgu133aPATH))
topall_res = data.frame(
"logFC"               = topall$logFC,
"P_Value"             = topall$P.Val,
"HGNC_symb"           = hgnc_genes,
"HGNC_name"           = str_replace_all(hgnc_names,",",";"),
"entrez"              = entrez_genes,
"pathway"             = pathway
)
topall_res = topall_res[ order(topall_res$logFC, decreasing = T)  ,]
} else if ( chip_type %in% c( "pd.hugene.2.0.st", "pd.huex.1.0.st.v2" ) ){
if ( ! exists("index_case"))
source("annotation.r")
probe_ids = rownames( topall )
index_probes = match( rownames( topall ), rownames(eset), nomatch = 0 )
exprs_case = rowMeans( exprs( eset )[ index_probes, index_case ] )
exprs_ctrl = rowMeans( exprs( eset )[ index_probes, index_ctrl ] )
split_fun = function( entry, pos ){ res = unlist( str_split( entry, " // " ) ); if (length(res) > 1){ return( res[pos] ) } else{ return( "" ) } }
#map=which( rownames(eset) %in% topall$probesetid )
hgnc_symbols = str_trim( unlist( lapply( topall$geneassignment, FUN=split_fun, 2 ) ) )
hgnc_names = str_trim( unlist( lapply( topall$geneassignment, FUN=split_fun, 3 ) ) )
library("biomaRt")
#ensembl     = useMart("ensembl",dataset="hsapiens_gene_ensembl")
#entrez  = getBM( attributes = c( "entrezgene", "hgnc_symbol" ), values = unique( hgnc_symbols), filters = "hgnc_symbol" , mart = ensembl)[1]
#hgnc_map    = match( hgnc_symbols, entrez_ids$hgnc_symbol  , nomatch = 0 )
#entrez      = hgnc_symbols
#entrez[ entrez != ""  ] = ""
#entrez[ which( hgnc_symbols %in%  entrez_ids$hgnc_symbol ) ] = entrez_ids$entrezgene[ hgnc_map ]
#entrez[ is.na(entrez) ] = ""
topall_res = data.frame(
"logFC"               = round( topall$logFC,2 ),
"expr_ctrl"           = round( exprs_ctrl, 2  ),
"expr_case"           = round( exprs_case, 2  ),
"P_Value"             = topall$P.Value,
"HGNC_symb"           = hgnc_symbols,
"HGNC_names"          = hgnc_names,
"Probe_ids"           = probe_ids,
#"entrez"              = entrez,
"gene_information"    = topall$geneassignment
)
topall_res = topall_res[ order( topall_res$logFC, decreasing = T )  ,]
topall_res = topall_res[ topall_res$HGNC_symb != "" ,]
}
eset
dir.create( results_file_path, showWarnings = F)
write.xlsx( topall_res, str_replace(str_replace(name_res_file,"~",user_folder),".csv",".xls"), row.names=F )
#
print( c( "Amount genes higher in Case cohort:", sum( topall_res$logFC >= lfc_exp ) ) )
print( c( "Amount genes lower in Case cohort:" , sum( topall_res$logFC <= lfc_exp ) ) )
eset
View(topall_res)
View(topall)
eset
rownames(topall)
View(topall)
topall_res$HGNC_symb
topall$HGNC_symb
library("pathview")
print("Step 10: Creating Pathway maps")
if ( !dir.exists( pathway_maps_path )   ){ dir.create(pathway_maps_path) }
if ( ! exists("eset")  )
source("normalization.r")
split_fun = function( entry,pos ){ res = unlist( str_split( entry, " // " ) ); if (length(res) > 1){ return( res[pos] ) } else{ return( "" ) } }
if ( chip_type %in% c( "hgu133plus2" ) ){
library("hgu133plus2.db")
hgnc_symbols = as.character( unlist( mget( rownames(volc_all), hgu133plus2SYMBOL) ))
} else if ( chip_type %in% c( "hgu133a" ) ){
library("hgu133a.db")
hgnc_symbols = as.character( unlist( mget( rownames(volc_all), hgu133aSYMBOL) ) )
} else if ( chip_type %in% c( "pd.hugene.2.0.st", "pd.huex.1.0.st.v2" ) ){
if ( ( ! ( "HGNC_symb" %in% colnames( topall_res ) ) )  |  ( length( topall_res$HGNC_symb ) == 0 )  ){
print("Pathway map creation error: topall_res$HGNC_symb does no exist")
quit()
}
hgnc_symbols = str_trim( unlist( lapply( volc_all$geneassignment, FUN=split_fun,2 ) ) )
hgnc_names   = str_trim( unlist( lapply( volc_all$geneassignment, FUN=split_fun,3 ) ) )
} else{
# note: check if this works for affy
hgnc_symbols = str_trim( unlist( lapply( fData(eset)$geneassignment, FUN=split_fun,2 ) ) )
hgnc_names   = str_trim( unlist( lapply( fData(eset)$geneassignment, FUN=split_fun,3 ) ) )
}
library("biomaRt")
ensembl     = useMart("ensembl",dataset="hsapiens_gene_ensembl")
entrez_ids  = getBM( attributes = c( "entrezgene", "hgnc_symbol" ), values = unique( hgnc_symbols), filters = "hgnc_symbol" , mart = ensembl)
hgnc_map    = match( hgnc_symbols, entrez_ids$hgnc_symbol  , nomatch = 0 )
entrez      = rep( "", length( hgnc_symbols ) )
entrez[ which( hgnc_map != 0 ) ] = entrez_ids$entrezgene[ hgnc_map ]
entrez[ is.na(entrez) ] = ""
exprs_case = round( rowMeans( exprs( eset )[ ,index_case ] ), 2 )
exprs_ctrl = round( rowMeans( exprs( eset )[ ,index_ctrl ] ), 2 )
dif_exp = round( exprs_case - exprs_ctrl, 2)
res_all_path = data.frame(
"logFC"               = dif_exp,
"HGNC"                = hgnc_symbols,
"entrez"              = entrez
)
setwd( pathway_maps_path )
Kegg_id = as.character( keggdata$Kegg_id )
ent = res_all_path$entrez
ent = ent[ent != ""]
exp_dat = res_all_path$logFC[  res_all_path$entrez != "" ]
names(exp_dat) = res_all_path$entrez[  res_all_path$entrez != "" ]
kegg <- mget( as.character( ent  ), KEGGEXTID2PATHID, ifnotfound=list(NA))
for (id in Kegg_id  ){
pathview( gene.data = exp_dat, pathway.id = id, kegg.native = T, limit = max( abs(exp_dat)  ) )
}
system("rm *.xml")
system("ls | grep -v 'pathview.png$' | xargs rm")
setwd(pipeline_loc)
eset
print("Running step 8: Differential Expression")
library("limma")
if ( chip_type %in% c( "hgu133plus2", "hgu133a" ) ){
eset = eset[ ! startsWith( rownames(eset), "AFFX-" ), ]
}
eset = eset[ , which( colnames(eset) %in% phenodata$ID  ) ]
index = which( colnames(phenodata) == cohorts_type )
pData( eset )$Group = phenodata[ match( colnames( eset ), phenodata$ID, nomatch = 0 ), index  ]
eDatSet = eset
if (var_filter ){
exprs( eDatSet ) = exprs( varFilter( eDatSet  , var.cutoff = 0.6 ) )
}
source("cohort_creation.r")
if (stat_design == "contrast"){
fit = lmFit( eDatSet[ , c( index_ctrl, index_case )  ], design )
cont.matrix = makeContrasts(  contrast = CASE - CTRL,  levels = design)
fit = contrasts.fit( fit, cont.matrix )
fit = eBayes( fit )
volc_all = topTable( fit, coef = "contrast", number  = nrow(eDatSet), adjust  ="BH", p.value = 1, lfc = 0)
} else {
fit = lmFit( eDatSet, design )
fit = eBayes( fit )
volc_all = topTable( fit, number  = nrow(eDatSet), adjust  ="BH", p.value = 1, lfc = 0)
}
plot( volc_all$logFC,   1-( volc_all$P.Value ))
topall = topTable( fit, coef = "contrast", number  = nrow( eDatSet ), adjust  ="none", p.value = p_val, lfc = lfc_exp)
if ( (dim(topall)[1] == 0) & (dim(topall)[2] == 0) ){
stop("Topall has dimension zero")
}
topall$logFC = round(topall$logFC,2)
topall$AveExpr = round(topall$AveExpr,2)
topall$t = round( topall$t, 2 )
topall$B = round( topall$B, 2 )
topall = topall[ abs(topall$logFC) >= lfc_exp  ,]
print( c( "Amount probes higher in Case cohort:", sum( topall$logFC >= lfc_exp ) ) )
print( c( "Amount probes lower in Case cohort:" , sum( topall$logFC <= lfc_exp ) ) )
eset
library("pathview")
print("Step 10: Creating Pathway maps")
if ( !dir.exists( pathway_maps_path )   ){ dir.create(pathway_maps_path) }
if ( ! exists("eset")  )
source("normalization.r")
split_fun = function( entry,pos ){ res = unlist( str_split( entry, " // " ) ); if (length(res) > 1){ return( res[pos] ) } else{ return( "" ) } }
if ( chip_type %in% c( "hgu133plus2" ) ){
library("hgu133plus2.db")
hgnc_symbols = as.character( unlist( mget( rownames(volc_all), hgu133plus2SYMBOL) ))
} else if ( chip_type %in% c( "hgu133a" ) ){
library("hgu133a.db")
hgnc_symbols = as.character( unlist( mget( rownames(volc_all), hgu133aSYMBOL) ) )
} else if ( chip_type %in% c( "pd.hugene.2.0.st", "pd.huex.1.0.st.v2" ) ){
if ( ( ! ( "HGNC_symb" %in% colnames( topall_res ) ) )  |  ( length( topall_res$HGNC_symb ) == 0 )  ){
print("Pathway map creation error: topall_res$HGNC_symb does no exist")
quit()
}
hgnc_symbols = str_trim( unlist( lapply( volc_all$geneassignment, FUN=split_fun,2 ) ) )
hgnc_names   = str_trim( unlist( lapply( volc_all$geneassignment, FUN=split_fun,3 ) ) )
} else{
# note: check if this works for affy
hgnc_symbols = str_trim( unlist( lapply( fData(eset)$geneassignment, FUN=split_fun,2 ) ) )
hgnc_names   = str_trim( unlist( lapply( fData(eset)$geneassignment, FUN=split_fun,3 ) ) )
}
library("biomaRt")
ensembl     = useMart("ensembl",dataset="hsapiens_gene_ensembl")
entrez_ids  = getBM( attributes = c( "entrezgene", "hgnc_symbol" ), values = unique( hgnc_symbols), filters = "hgnc_symbol" , mart = ensembl)
hgnc_map    = match( hgnc_symbols, entrez_ids$hgnc_symbol  , nomatch = 0 )
entrez      = rep( "", length( hgnc_symbols ) )
entrez[ which( hgnc_map != 0 ) ] = entrez_ids$entrezgene[ hgnc_map ]
entrez[ is.na(entrez) ] = ""
exprs_case = round( rowMeans( exprs( eset )[ ,index_case ] ), 2 )
exprs_ctrl = round( rowMeans( exprs( eset )[ ,index_ctrl ] ), 2 )
dif_exp = round( exprs_case - exprs_ctrl, 2)
res_all_path = data.frame(
"logFC"               = dif_exp,
"HGNC"                = hgnc_symbols,
"entrez"              = entrez
)
setwd( pathway_maps_path )
Kegg_id = as.character( keggdata$Kegg_id )
ent = res_all_path$entrez
ent = ent[ent != ""]
exp_dat = res_all_path$logFC[  res_all_path$entrez != "" ]
names(exp_dat) = res_all_path$entrez[  res_all_path$entrez != "" ]
kegg <- mget( as.character( ent  ), KEGGEXTID2PATHID, ifnotfound=list(NA))
for (id in Kegg_id  ){
pathview( gene.data = exp_dat, pathway.id = id, kegg.native = T, limit = max( abs(exp_dat)  ) )
}
system("rm *.xml")
system("ls | grep -v 'pathview.png$' | xargs rm")
setwd(pipeline_loc)
pipeline_loc = paste( system("echo $HOME",intern = T), "Generic_mRNA_Expression_Pipeline", sep ="/" )
setwd( paste(pipeline_loc, "Src", sep="/") ) # Set the path to where the pipeline is located
source( "pipeline_structure.r" )
default_parameters = T
which_project = "ovarian"
source( paste(system("echo $HOME", intern = T), "project_files.r", sep="/"))
###
create_cohorts    = T # 2
parse_files       = T # 3
normalize         = T # 4
qc_control        = F # 5
annotate          = T # 6
absent_analysis   = T # 7
dif_exp_ana       = F # 8
export_results    = F # 9
create_pathways   = F # 10
extract_interest  = F # 11
annotate_tissue_abbundance = F # 12
## Misc
# Extra information
expression_data = "~/Dropbox/PhD/NAR_sub_june_2015/expression_all.txt"
### frma test
frma_path = "/media/rayott/Backup/Runx_AML1_Leukemea/"
# generic
stat_design = "contrast"
setwd( paste(pipeline_loc, "Src", sep="/") )
source( "pipeline_structure.r" );run_analysis();print( "Finished" )
