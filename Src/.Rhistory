set.seed(955)
# Make some noisily increasing data
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = 1:20 + rnorm(20,sd=3),
yvar = 1:20 + rnorm(20,sd=3))
# cond         xvar         yvar
#    A -4.252354091  3.473157275
#    A  1.702317971  0.005939612
#   ...
#    B 17.793359218 19.718587761
#    B 19.319909163 19.647899863
g4 <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_smooth() +  #we'll see why order is important
geom_point(shape=19, aes(color = cond), size=5)
g4
require(gridSVG)
#print our ggplot2 graphic again
g4
#export to SVG file and R object
#grid.export deprecates the older gridToSVG
g4.svg <- grid.export("plot1.svg",addClasses=TRUE)
cat(XML::saveXML(g4.svg$svg))
sink("plot1.svg")
cat(XML::saveXML(g4.svg$svg))
sink()
getwd()
grid.export("plot1.svg",addClasses=TRUE, exportJS = "inline")
cat(
'<script> ourdata=',
rjson::toJSON(apply(g4$data,MARGIN=1,FUN=function(x)return(list(x)))),
'</script>'
)
library("rjson")
install.packages("rjson")
library("rjson")
cat(
'<script> ourdata=',
rjson::toJSON(apply(g4$data,MARGIN=1,FUN=function(x)return(list(x)))),
'</script>'
)
res = contourLines(volcano)
str(res[1:2])  # first two elements of the list
xy = paste(unlist(lapply(res, function(z) {
xs = paste(round(z$x, 3), collapse = ",")
ys = paste(round(z$y, 3), collapse = ",")
sprintf("{\n  \"x\": [%s],\n  \"y\": [%s]\n}", xs, ys)
})), collapse = ", \n")
cat("<script>", sprintf("var data = [%s]", xy), "</script>", sep = "\n")
res = contourLines(volcano)#
xy = paste(unlist(lapply(res, function(z) {
xs = paste(round(z$x, 3), collapse = ",")
ys = paste(round(z$y, 3), collapse = ",")
sprintf("{\n  \"x\": [%s],\n  \"y\": [%s]\n}", xs, ys)
})), collapse = ", \n")
cat("<script>", sprintf("var data = [%s]", xy), "</script>", sep = "\n")
res = contourLines(volcano)#
xy = paste(unlist(lapply(res, function(z) {
xs = paste(round(z$x, 3), collapse = ",")
ys = paste(round(z$y, 3), collapse = ",")
sprintf("{\n  \"x\": [%s],\n  \"y\": [%s]\n}", xs, ys)
})), collapse = ", \n")
sink("test.svg")
cat("<script>", sprintf("var data = [%s]", xy), "</script>", sep = "\n")
sink()
res = contourLines(volcano)#
str(res[1:2])
xy = paste(unlist(lapply(res, function(z) {
xs = paste(round(z$x, 3), collapse = ",")
ys = paste(round(z$y, 3), collapse = ",")
sprintf("{\n  \"x\": [%s],\n  \"y\": [%s]\n}", xs, ys)
})), collapse = ", \n")
sink("test.svg")
cat("<script>", sprintf("var data = [%s]", xy), "</script>", sep = "\n")
sink()
sink("test.svg")
res = contourLines(volcano)#
str(res[1:2])
xy = paste(unlist(lapply(res, function(z) {
xs = paste(round(z$x, 3), collapse = ",")
ys = paste(round(z$y, 3), collapse = ",")
sprintf("{\n  \"x\": [%s],\n  \"y\": [%s]\n}", xs, ys)
})), collapse = ", \n")
cat("<script>", sprintf("var data = [%s]", xy), "</script>", sep = "\n")
sink()
ibrary(XML)
# read all html table elements
raw &lt;- readHTMLTable(&quot;WordPress.html&quot;)
# ours is the first of two tables
# in the html document
data &lt;- raw[[1]]
library(XML)
# read all html table elements
raw &lt;- readHTMLTable(&quot;WordPress.html&quot;)
# ours is the first of two tables
# in the html document
data &lt;- raw[[1]]
readHTMLTable(&quot;WordPress.html&quot;)
require(rCharts)
p1 <- rPlot(SOG ~ yearID, data = team_data,
type = "point",
size = list(const = 2),
color = list(const = "#888"),
tooltip = "#! function(item){
return item.SOG + ' ' + item.name + ' ' + item.yearID
} !#"
)
rPlot(  )
x
y
x = rnorm (100)
y = rnorm(100)
rPlot( x,y )
rPlot( x,y, type = "points" )
rPlot( x,y, type = "point" )
data_f = data.frame( "x"=x, "y"=y, stringsAsFactors = F )
rPlot( x,y, type = "point" , data = data_f)
rPlot( x~y, type = "point" , data = data_f)
p1=rPlot( x~y, type = "point" , data = data_f)
p1$save("test.svg")
p1$save("test.svg", standalone =T)
p1$save("test.svg", standalone =T)
p1$save("test.svg", standalone =T, cnd = T)
library("arrayqualitymetrics")
library("arrayQualityMetrics")
library("affy")
read.affybatch("~/Desktop/ag_na_upload/CEL/")
ab=read.affybatch("~/Desktop/ag_na_upload/CEL/MZlike/")
celFiles = list.celfiles( "~/Desktop/ag_na_upload/CEL/MZlike/", full =T)
celFiles
raw_data = read.affybatch(celFiles)
library("xlsx")
library("gdata")
library("RColorBrewer")
library("arrayQualityMetrics")
library("limma")
library("KEGG.db")
library("pathview")
library("stringr")
source("pipeline_structure.r")
raw_data = read.ce(celFiles)
library("oligo")
raw_data = read.celfiles(celFiles)
library("pg.hugene-2.0.st")
library("pg.hugene.2.0.st")
install.paclages("pg.hugene.2.0.st")
source("http://bioconductor.org/biocLite.R")
biocLite("pg.hugene.2.0.st")
biocLite("pg.hugene.2.0.st")
source("http://bioconductor.org/biocLite.R")
update.packages("oligoData")
biocValid()
remove.packages("oligoData")
install.packages("oligoData")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("oligoData")
biocLite("pg.hugene.2.0.st")
celFiles = list.celfiles( "~/Desktop/ag_na_upload/CEL/MZlike/", full =T)
library("oligo")
celFiles = list.celfiles( "~/Desktop/ag_na_upload/CEL/MZlike/", full =T)
raw_data = read.affybatch(celFiles)
raw_data = read.celfiles(celFiles)
biocLite("pd.hugene.2.0.st")
raw_data = read.celfiles(celFiles)
library(""#)
library("arrayQualityMetrics")
biocLite("biocLite("pd.hugene.2.0.st")")
biocLite("arrayQualityMetrics")
library("arrayQualityMetrics")
arrayQualityMetrics(raw_data)
getwd()
biocLite("caret",dependencies=T)
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("caret",dependencies=T)
library("caret")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocValid()
removae.packages("SVGAnnotation")
remove.packages("SVGAnnotation")
biocValid()
biocLite()
library("SVGAnnotation")
biocValid()
getwd()
cd Dropbox
t = read.table("~/Dropbox/PhD/Generic_Biomarker_mRNA_Pipeline/dif_tab_all.tab",header=T)
t = read.table("~/Dropbox/PhD/Generic_Biomarker_mRNA_Pipeline/dif_tab_all.tab",header=T,sep="\t")
t = read.table("~/Dropbox/PhD/Generic_Biomarker_mRNA_Pipeline/dif_tab_all.tab",header=T,sep="\t",fill=T)
dim(t)
head(t)
split_fun = function( entry, pos ){ res = unlist( str_split( entry, " // " ) ); if (length(res) > 1){ return( res[pos] ) } else{ return( "" ) } }
hgnc_symbols = str_trim( unlist( lapply( t$geneassignment, FUN=split_fun, 2 ) ) )
library("sgtringr")
library("stringr")
hgnc_symbols = str_trim( unlist( lapply( t$geneassignment, FUN=split_fun, 2 ) ) )
hgnc_symbols
t = cbind(t$logFC,hgnc_symbols,t$geneassignment,t$mrnaassignment,t$pathway)
head(t)
t = read.table("~/Dropbox/PhD/Generic_Biomarker_mRNA_Pipeline/dif_tab_all.tab",header=T,sep="\t",fill=T)
t = cbind(t$logFC,hgnc_symbols,t$geneassignment,t$mrnaassignment,t$pathway)
library("WriteXLS")
write.xlsx( t, "comparative_expression_mz_minus_sm.xls", row.names=F )
?write.xlsx
??write.xlsx
library("xlsx")
write.xlsx( t, "comparative_expression_mz_minus_sm.xls", row.names=F )
colnames(t)
colnames(t) = c("MZ_Minus_SM_LogFC","HGNC_symbol","gene_assignment","mrna_assignment","pathway")
colnames(t)
head(t)
t = read.table("~/Dropbox/PhD/Generic_Biomarker_mRNA_Pipeline/dif_tab_all.tab",header=T,sep="\t",fill=T)
head(t)
t_res = data.frame( "logFC" = round(t$logFC,2), "HGNC_symbol" = hgnc_symbols, "gene_assignment" = t$geneassignment, "mrna_assignment" = t$mrnaassignment, "pathway" = t$pathway )
t_res = data.frame( "logFC" = round( as.numeric(t$logFC),2), "HGNC_symbol" = hgnc_symbols, "gene_assignment" = t$geneassignment, "mrna_assignment" = t$mrnaassignment, "pathway" = t$pathway )
head(t_res)
t$logFC
as.numeric(t$logFC)
as.double(t$logFC)
unlist(t$logFC)
as.numeric(unlist(t$logFC))
as.charachter((unlist(t$logFC)))
as.character((unlist(t$logFC)))
as.numeric(as.character((unlist(t$logFC))))
as.double(as.character((unlist(t$logFC))))
as.double(as.character((t$logFC)))
t_res = data.frame( "logFC" = round( as.double(as.character((t$logFC))),2), "HGNC_symbol" = hgnc_symbols, "gene_assignment" = t$geneassignment, "mrna_assignment" = t$mrnaassignment, "pathway" = t$pathway )
head(t_res)
t_res = data.frame( "logFC" = round( as.double(as.character((t$logFC))),1), "HGNC_symbol" = hgnc_symbols, "gene_assignment" = t$geneassignment, "mrna_assignment" = t$mrnaassignment, "pathway" = t$pathway )
t_res = t_res[order(t_res$logFC),]
head(t_Res)
head(t_res)
t_res = t_res[order(t_res$logFC,decreasing = T),]
write.xlsx( t_res, "comparative_expression_mz_minus_sm.xls", row.names=F )
write.table( t_res, "comparative_expression_mz_minus_sm.tab", row.names=F, ccol.names = T, sep = "\t", quote = F )
write.table( t_res, "comparative_expression_mz_minus_sm.tab", row.names=F, col.names = T, sep = "\t", quote = F )
write.xlsx( t_res[abs(t_res$logFC)>=1,], "comparative_expression_mz_minus_sm.xls", row.names=F )
t_res$pathway[is.na(t_res$pathway)]
t_res$pathway[is.na(t_res$pathway)] = ""
t_res = t_res[!is.na(t_res$HGNC_symbol),]
head(t_res)
t_res = t_res[t_res$HGNC_symbol!="",]
head(t_res)
write.xlsx( t_res[abs(t_res$logFC)>=1,], "comparative_expression_mz_minus_sm.xls", row.names=F )
source("http://bioconductor.org/biocLite.R")
update.packages(repos=biocinstallRepos(), ask=FALSE,
checkBuilt=TRUE)
help( package = "arrayQualityMetrics")
help( package = "libCairo")
help( package = "libcairo")
help( package = "cairo")
help( package = "cairodevice")
help( package = "Cairo")
help( package = "svgAnnotation")
help( package = "SVGAnnotation")
help( package = "arrayQualityMetrics")
library("GSEAlm")
biocLite("GSEAlm")
library("GSEAlm")
load("breastCancer.RData")
load("mSigDB.RData")
library("GSEAbase")
biocLite("GSEAbase")
biocLite("GSEABase")
library("GSEAbase")
library("GSEABase")
data(sample.ExpressionSet)
sample.ExpressionSet
pData(sample.ExpressionSet)
d=pData(sample.ExpressionSet)
pVals = gsealmPerm(d, ~type, score, nperm = 1000)
?gsealmPerm
biocLite()
biocLite()
biocLite()
upadte.packages()
update.packages()
biocValid()
pipeline_loc = "/usr/Generic_mRNA_Expression_Pipeline" #server path
#pipeline_loc = paste( system("echo $HOME",intern = T), "Generic_mRNA_Expression_Pipeline", sep ="/" ) #local path for debug
setwd( paste(pipeline_loc, "Src", sep="/") ) # Set the path to where the pipeline is located
source( "pipeline_structure.r" )
default_parameters = T
which_project = "hnsc"
source("project_files.r")
###
create_cohorts    = T # 2
parse_files       = T # 3
normalize         = T # 4
qc_control        = F # 5
annotate          = T # 6
absent_analysis   = T # 7
dif_exp_ana       = T # 8
export_results    = T # 9
create_pathways   = T # 10
extract_interest  = T # 11
annotate_tissue_abbundance = F # 12
## Misc
### frma test
# generic
stat_design = "contrast"
run_analysis();print( "Finished" )
))
library(shiny)
install.packages("shiny")
library(shiny)
# Define server logic for slider examples
shinyServer(function(input, output) {
# Reactive expression to compose a data frame containing all of
# the values
sliderValues <- reactive({
# Compose data frame
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse=' '),
input$format,
input$animation)),
stringsAsFactors=FALSE)
})
# Show the values using an HTML table
output$values <- renderTable({
sliderValues()
})
})
library(shiny)
# Define UI for slider demo application
shinyUI(fluidPage(
#  Application title
titlePanel("Sliders"),
# Sidebar with sliders that demonstrate various available
# options
sidebarLayout(
sidebarPanel(
# Simple integer interval
sliderInput("integer", "Integer:",
min=0, max=1000, value=500),
# Decimal interval with step value
sliderInput("decimal", "Decimal:",
min = 0, max = 1, value = 0.5, step= 0.1),
# Specification of range within an interval
sliderInput("range", "Range:",
min = 1, max = 1000, value = c(200,500)),
# Provide a custom currency format for value display,
# with basic animation
sliderInput("format", "Custom Format:",
min = 0, max = 10000, value = 0, step = 2500,
format="$#,##0", locale="us", animate=TRUE),
# Animation with custom interval (in ms) to control speed,
# plus looping
sliderInput("animation", "Looping Animation:", 1, 2000, 1,
step = 10, animate=
animationOptions(interval=300, loop=TRUE))
),
# Show a table summarizing the values entered
mainPanel(
tableOutput("values")
)
)
))
# Compose data frame
shiny::runApp('Desktop')
shiny::runApp('Desktop')
source("project_files.r")
pipeline_loc = "/usr/Generic_mRNA_Expression_Pipeline" #server path
#pipeline_loc = paste( system("echo $HOME",intern = T), "Generic_mRNA_Expression_Pipeline", sep ="/" ) #local path for debug
setwd( paste(pipeline_loc, "Src", sep="/") ) # Set the path to where the pipeline is located
source( "pipeline_structure.r" )
default_parameters = T
which_project = "hnsc"
source("project_files.r")
###
create_cohorts    = T # 2
parse_files       = T # 3
normalize         = T # 4
qc_control        = F # 5
annotate          = T # 6
absent_analysis   = T # 7
dif_exp_ana       = T # 8
export_results    = T # 9
create_pathways   = T # 10
extract_interest  = T # 11
annotate_tissue_abbundance = F # 12
## Misc
### frma test
# generic
stat_design = "contrast"
run_analysis();print( "Finished" )
getwd()
pipeline_loc = paste( system("echo $HOME",intern = T), "Generic_mRNA_Expression_Pipeline", sep ="/" ) #local path for debug
pipeline_loc
pipeline_loc = "/Users/raikotto/Dropbox/PhD/Generic_Biomarker_mRNA_Pipeline/"
setwd( paste(pipeline_loc, "Src", sep="/") ) # Set the path to where the pipeline is located
source( "pipeline_structure.r" )
#pipeline_loc = "/usr/Generic_mRNA_Expression_Pipeline" #server path
#pipeline_loc = paste( system("echo $HOME",intern = T), "Generic_mRNA_Expression_Pipeline", sep ="/" ) #local path for debug
pipeline_loc = "/Users/raikotto/Dropbox/PhD/Generic_Biomarker_mRNA_Pipeline/"
setwd( paste(pipeline_loc, "Src", sep="/") ) # Set the path to where the pipeline is located
source( "pipeline_structure.r" )
default_parameters = T
which_project = "hnsc"
source("project_files.r")
###
create_cohorts    = T # 2
parse_files       = T # 3
normalize         = T # 4
qc_control        = F # 5
annotate          = T # 6
absent_analysis   = T # 7
dif_exp_ana       = T # 8
export_results    = T # 9
create_pathways   = T # 10
extract_interest  = T # 11
annotate_tissue_abbundance = F # 12
## Misc
### frma test
# generic
stat_design = "contrast"
run_analysis();print( "Finished" )
#pipeline_loc = "/usr/Generic_mRNA_Expression_Pipeline" #server path
#pipeline_loc = paste( system("echo $HOME",intern = T), "Generic_mRNA_Expression_Pipeline", sep ="/" ) #local path for debug
pipeline_loc = "/Users/raikotto/Dropbox/PhD/Generic_Biomarker_mRNA_Pipeline/"
setwd( paste(pipeline_loc, "Src", sep="/") ) # Set the path to where the pipeline is located
source( "pipeline_structure.r" )
default_parameters = T
which_project = "hnsc"
source("project_files.r")
###
create_cohorts    = T # 2
parse_files       = T # 3
normalize         = T # 4
qc_control        = F # 5
annotate          = T # 6
absent_analysis   = T # 7
dif_exp_ana       = T # 8
export_results    = T # 9
create_pathways   = T # 10
extract_interest  = T # 11
annotate_tissue_abbundance = F # 12
## Misc
### frma test
# generic
stat_design = "contrast"
run_analysis();print( "Finished" )
source("project_files.r")
pipeline_loc = "/Users/raikotto/Dropbox/PhD/Generic_Biomarker_mRNA_Pipeline/"
pipeline_loc
setwd( pipeline_loc ) # Set the path to where the pipeline is located
source( "pipeline_structure.r" )
source( "src/pipeline_structure.r" )
default_parameters = T
which_project = "hnsc"
source("project_files.r")
#pipeline_loc = "/usr/Generic_mRNA_Expression_Pipeline" #server path
#pipeline_loc = paste( system("echo $HOME",intern = T), "Generic_mRNA_Expression_Pipeline", sep ="/" ) #local path for debug
pipeline_loc = "/Users/raikotto/Dropbox/PhD/Generic_Biomarker_mRNA_Pipeline/"
#setwd( paste(pipeline_loc, "Src", sep="/") ) # Set the path to where the pipeline is located
setwd( pipeline_loc ) # Set the path to where the pipeline is located
source( "src/pipeline_structure.r" )
default_parameters = T
which_project = "hnsc"
source("project_files.r")
###
create_cohorts    = T # 2
parse_files       = T # 3
normalize         = T # 4
qc_control        = F # 5
annotate          = T # 6
absent_analysis   = T # 7
dif_exp_ana       = T # 8
export_results    = T # 9
create_pathways   = T # 10
extract_interest  = T # 11
annotate_tissue_abbundance = F # 12
## Misc
### frma test
# generic
stat_design = "contrast"
run_analysis();print( "Finished" )
#pipeline_loc = "/usr/Generic_mRNA_Expression_Pipeline" #server path
#pipeline_loc = paste( system("echo $HOME",intern = T), "Generic_mRNA_Expression_Pipeline", sep ="/" ) #local path for debug
pipeline_loc = "/Users/raikotto/Dropbox/PhD/Generic_Biomarker_mRNA_Pipeline/"
#setwd( paste(pipeline_loc, "Src", sep="/") ) # Set the path to where the pipeline is located
setwd( pipeline_loc ) # Set the path to where the pipeline is located
source( "src/pipeline_structure.r" )
default_parameters = T
which_project = "hnsc"
source("project_files.r")
###
create_cohorts    = T # 2
parse_files       = T # 3
normalize         = T # 4
qc_control        = F # 5
annotate          = T # 6
absent_analysis   = T # 7
dif_exp_ana       = T # 8
export_results    = T # 9
create_pathways   = T # 10
extract_interest  = T # 11
annotate_tissue_abbundance = F # 12
## Misc
### frma test
# generic
stat_design = "contrast"
run_analysis();print( "Finished" )
getwd()
